<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>JS-Chain Pro Miner Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
  <style>
    body { background-color: #121212; color: #fff; }
    .core-fastest { background-color: #1e5128 !important; }
    .toast-container { position: fixed; top: 1rem; right: 1rem; z-index: 9999; }
    .spinner-border-sm { width: 1rem; height: 1rem; }
  </style>
</head>
<body class="p-3">
<div class="container">
  <h1 class="mb-4">⛏ JS-Chain Miner Dashboard</h1>

  <div class="row mb-3">
    <div class="col-md-6">
      <label for="minerAddress" class="form-label">Miner Address</label>
      <input type="text" id="minerAddress" class="form-control" placeholder="Paste your miner wallet address">
    </div>
    <div class="col-md-6 d-flex align-items-end">
      <button class="btn btn-success me-2" onclick="startMining()">Start Mining</button>
      <button class="btn btn-danger" onclick="stopMining()">Stop Mining</button>
    </div>
  </div>

  <div class="mb-3">
    <span>Status: 
      <span id="statusBadge" class="badge bg-secondary">Idle</span>
      <span id="statusSpinner" class="spinner-border spinner-border-sm text-success ms-2 d-none"></span>
    </span>
    <span class="ms-3">Height: <span id="height">0</span></span>
    <span class="ms-3">Difficulty: <span id="difficulty">0</span></span>
    <span class="ms-3">Reward: <span id="reward">0</span></span>
  </div>

  <div class="mb-3">
    ETA Next Block: <span id="eta">-</span>
  </div>

  <h4>Total Hashrate: <span id="totalHashrate">0</span> H/s</h4>
  <canvas id="hashrateChart" height="100"></canvas>

  <h4 class="mt-4">Per-Core Stats</h4>
  <div class="table-responsive">
    <table class="table table-dark table-striped align-middle" id="coreTable">
      <thead>
        <tr>
          <th>Core</th>
          <th>Hashrate (H/s)</th>
          <th>Best Hash</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
</div>

<div class="toast-container" id="toastContainer"></div>

<script>
let chart;
let totalHashrateHistory = [];
let difficultyHistory = [];
let labels = [];

async function fetchStats() {
  const res = await fetch('/mining-stats');
  const data = await res.json();

  document.getElementById('height').textContent = data.height;
  document.getElementById('difficulty').textContent = data.difficulty;
  document.getElementById('reward').textContent = data.reward;
  document.getElementById('totalHashrate').textContent = data.totalHashrate;

  const isMining = Boolean(data.startedAt);
  document.getElementById('statusBadge').textContent = isMining ? 'Mining' : 'Idle';
  document.getElementById('statusBadge').className = `badge ${isMining ? 'bg-success' : 'bg-secondary'}`;
  document.getElementById('statusSpinner').classList.toggle('d-none', !isMining);

  // ETA kalkulasi sederhana
  if (isMining && data.totalHashrate > 0) {
    const target = Math.pow(16, (64 - data.difficulty)) / data.totalHashrate;
    document.getElementById('eta').textContent = formatETA(target);
  } else {
    document.getElementById('eta').textContent = '-';
  }

  // Update chart datasets
  labels.push(new Date().toLocaleTimeString());
  totalHashrateHistory.push(data.totalHashrate);
  difficultyHistory.push(data.difficulty);
  if (labels.length > 20) {
    labels.shift(); totalHashrateHistory.shift(); difficultyHistory.shift();
  }
  chart.data.labels = labels;
  chart.data.datasets[0].data = totalHashrateHistory;
  chart.data.datasets[1].data = difficultyHistory;
  chart.update();

  // Per-core table update
  const tbody = document.querySelector('#coreTable tbody');
  tbody.innerHTML = '';
  let fastestCore = null, maxRate = 0;
  for (const core in data.perCore) {
    if (data.perCore[core] > maxRate) { maxRate = data.perCore[core]; fastestCore = core; }
  }
  for (const core in data.perCore) {
    const tr = document.createElement('tr');
    if (core == fastestCore && data.totalHashrate > 0) tr.classList.add('core-fastest');
    tr.innerHTML = `<td>${core}</td><td>${data.perCore[core] || 0}</td><td>${data.bestHash[core] || '-'}</td>`;
    tbody.appendChild(tr);
  }

  // Toast notif block baru
  if (data.lastBlockMinedAt && (!window._lastBlock || data.lastBlockMinedAt !== window._lastBlock)) {
    if (window._lastBlock) showToast('✅ Block mined!', `At ${new Date(data.lastBlockMinedAt).toLocaleTimeString()}`);
    window._lastBlock = data.lastBlockMinedAt;
  }
}

function formatETA(seconds) {
  if (seconds < 60) return `${Math.round(seconds)}s`;
  const m = Math.floor(seconds / 60), s = Math.floor(seconds % 60);
  if (m < 60) return `${m}m ${s}s`;
  const h = Math.floor(m / 60);
  return `${h}h ${m % 60}m`;
}

function startMining() {
  const minerAddress = document.getElementById('minerAddress').value.trim();
  if (!minerAddress) return alert('Isi miner address!');
  fetch('/miner/start', {
    method: 'POST', headers: {'Content-Type':'application/json'},
    body: JSON.stringify({ minerAddress })
  });
}

function stopMining() { fetch('/miner/stop', { method: 'POST' }); }

function showToast(title, body) {
  const container = document.getElementById('toastContainer');
  const toastEl = document.createElement('div');
  toastEl.className = 'toast align-items-center text-bg-primary border-0 show';
  toastEl.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">
        <strong>${title}</strong> ${body}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" onclick="this.parentElement.parentElement.remove()"></button>
    </div>
  `;
  container.appendChild(toastEl);
  setTimeout(() => toastEl.remove(), 5000);
}

window.onload = () => {
  chart = new Chart(document.getElementById('hashrateChart'), {
    type: 'line',
    data: {
      labels,
      datasets: [
        { label: 'Total Hashrate', data: totalHashrateHistory, borderColor: '#0d6efd', tension: 0.3, yAxisID: 'y' },
        { label: 'Difficulty', data: difficultyHistory, borderColor: '#ffc107', tension: 0.3, yAxisID: 'y1' }
      ]
    },
    options: {
      scales: {
        x: { ticks: { color: '#ccc' } },
        y: { position: 'left', ticks: { color: '#0d6efd' } },
        y1: { position: 'right', ticks: { color: '#ffc107' }, grid: { drawOnChartArea: false } }
      }
    }
  });
  setInterval(fetchStats, 1000);
};
</script>
</body>
</html>
