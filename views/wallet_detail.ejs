<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= name %> â€” Wallet</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.min.js"></script>
  <style>
    body { background:#121212; color:#fff }
    .mono { font-family: monospace; word-break: break-all }
  </style>
</head>
<body class="p-4">
<div class="container">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1>ðŸ’¼ Wallet: <span class="text-info"><%= name %></span></h1>
    <div>
      <a class="btn btn-outline-info me-2" href="/wallets">Wallets</a>
      <a class="btn btn-outline-info me-2" href="/miner">Miner</a>
      <a class="btn btn-outline-light" href="/explorer">Explorer</a>
    </div>
  </div>

  <div class="card bg-dark mb-3">
    <div class="card-body">
      <div><strong>Address (Public Key):</strong></div>
      <div class="mono small text-info"><%= publicKey %></div>
      <canvas id="qrCanvas" class="mt-3"></canvas>
      <div class="mt-3">
        <span class="me-3">Balance: <strong id="balance">-</strong></span>
        <a class="btn btn-sm btn-warning me-2" href="/wallets/<%= encodeURIComponent(name) %>/export">Export Wallet</a>
        <button class="btn btn-sm btn-success" onclick="startMining()">Start Mining</button>
      </div>
    </div>
  </div>

  <div class="row g-4">
    <div class="col-md-6">
      <div class="card bg-dark">
        <div class="card-body">
          <h5 class="card-title">Send Transaction</h5>
          <div class="mb-3">
            <label class="form-label">To Address</label>
            <input type="text" id="toAddress" class="form-control" placeholder="receiver public key">
          </div>
          <div class="mb-3">
            <label class="form-label">Amount</label>
            <input type="number" id="amount" class="form-control" min="0" step="0.00000001" placeholder="0">
          </div>
          <button class="btn btn-primary" onclick="sendTx()">Send</button>
          <div id="sendMsg" class="mt-2 text-info"></div>
        </div>
      </div>
    </div>

    <div class="col-md-6">
      <h5>Transaction History</h5>
      <div class="table-responsive">
        <table class="table table-dark table-striped align-middle">
          <thead>
            <tr>
              <th>Block</th>
              <th>From</th>
              <th>To</th>
              <th>Amount</th>
              <th>Time</th>
            </tr>
          </thead>
          <tbody id="txBody"></tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
const NAME = "<%= name %>";
const ADDRESS = "<%= publicKey %>";

QRCode.toCanvas(document.getElementById('qrCanvas'), ADDRESS, { width: 128 }, function (error) {
  if (error) console.error(error);
});

async function refresh() {
  const bal = await (await fetch(`/api/balance/${ADDRESS}`)).json();
  document.getElementById('balance').textContent = bal.balance;

  const hist = await (await fetch(`/api/history/${ADDRESS}`)).json();
  const tbody = document.getElementById('txBody');
  tbody.innerHTML = '';
  hist.transactions.slice().reverse().forEach(tx => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${tx.blockIndex}</td>
      <td class="mono small">${tx.from.slice(0, 12)}...</td>
      <td class="mono small">${tx.to.slice(0, 12)}...</td>
      <td>${tx.amount}</td>
      <td>${new Date(tx.timestamp).toLocaleString()}</td>
    `;
    tbody.appendChild(tr);
  });
}

async function sendTx() {
  const toAddress = document.getElementById('toAddress').value.trim();
  const amount = parseFloat(document.getElementById('amount').value);
  if (!toAddress || !Number.isFinite(amount) || amount <= 0) {
    return msg('Invalid input', true);
  }
  const res = await fetch('/api/transfer', {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({ fromName: NAME, toAddress, amount })
  });
  if (res.ok) {
    msg('Transaction created. It will be included in the next block.');
    document.getElementById('amount').value = '';
    await refresh();
  } else {
    const err = await res.json().catch(()=>({error:'Failed'}));
    msg('Error: ' + (err.error || 'failed'), true);
  }
}

function msg(t, err=false) {
  const el = document.getElementById('sendMsg');
  el.textContent = t;
  el.className = err ? 'mt-2 text-danger' : 'mt-2 text-success';
}

async function startMining() {
  await fetch('/miner/start', {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({ minerAddress: ADDRESS })
  });
  msg('Mining started with this address.');
}

refresh();
setInterval(refresh, 3000);
</script>
</body>
</html>
